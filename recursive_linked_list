#include <stdio.h>
#include <stdlib.h>

typedef void(*DISPLAY)(void*);
typedef int(*COMPARE)(void*, void*);

typedef struct _node {
    void *data;
    struct _node *next;
} Node;

typedef struct _linkedList {
    Node *head;
    Node *tail;
    Node *current;
} LinkedList;

void initializeList(LinkedList *list);
void addTail(LinkedList *list, void* data);
void displayLinkedList(LinkedList *list, DISPLAY display);
void displayLetter(char *c);
int compareElements(char *e1, char *e2);
void displayLinkedList_recurstion(LinkedList *list, Node * next);
int main() {
    char *letter_1 = 'a';
    char *letter_2 = 'b';
    char *letter_3 = 'c';

    LinkedList linkedList;
    LinkedList linkedList_1;

    initializeList(&linkedList);

    addTail(&linkedList, letter_1);
    addTail(&linkedList, letter_2);
    addTail(&linkedList, letter_3);

//    displayLinkedList(&linkedList, (DISPLAY)displayLetter);
    displayLinkedList_recurstion(&linkedList, linkedList.head);

    printf("Hello world!\n");
    return 0;
}

void initializeList(LinkedList *list) {
    list->head = NULL;
    list->tail = NULL;
    list->current = NULL;
}

void addTail(LinkedList *list, void* data) {
    Node *node = (Node*) malloc(sizeof(Node));
    node->data = data;
    node->next = NULL;
    if (list->head == NULL) {
        list->head = node;
    } else {
        list->tail->next = node;
    }
    list->tail = node;
}

void displayLinkedList(LinkedList *list, DISPLAY display) {
    printf("\nLinked List\n");
    Node *current = list->head;
    while (current != NULL) {
        display(current->data);
        current = current->next;
    }
}

void displayLinkedList_recurstion(LinkedList *list, Node *current) {
    printf("\nLinked List\n");
//    Node *current = list->head;
    if (current != NULL) {
        printf("%c\n", current->data);
        current = current->next;
        displayLinkedList_recurstion(&list, current);
    }
}

void displayLetter(char *c) {
    printf("%c\n", c);
}

int compareElements(char *el_1, char *el_2) {
    return strcmp(el_1, el_2);
}
